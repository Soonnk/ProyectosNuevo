<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAA0AAAAUAAAAFgAAABYAAAAWAAAAFAAA
        AA0AAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAkAAAAbAAAAMQAAAD8AAABDAAAAQwAA
        AEMAAAA/AAAAMQAAABsAAAAJAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAIxoWE0iCcF3ElYBp/5R+
        aP+Tfmj/lH5o/5V/af+BcF3EGhYTSAAAACIAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJkV0hznYpy/8W3
        pf/n4tb/9PDk//Pw5P/08OT/5+LW/8a4p/+dinL/YFRGdgAAACMAAAAWAAAAFgAAABYAAAAWAAAAFgAA
        ABYAAAAWAAAAFgAAABYAAAAWAAAAFgAAABUAAAANAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFp+K
        dP/Yz73/3tXB/9PGrv/Owaf/zsCn/87Bp//Txq7/3tXB/9vRwf+fi3X/AAAASAAAAEMAAABDAAAAQwAA
        AEMAAABDAAAAQwAAAEMAAABDAAAAQwAAAEMAAABDAAAAPwAAACsAAAANAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAASoo54/8m6ov/Ar5T/vqyR/72rkP+9q5D/vauQ/76skf/Ar5T/ybqh/6KNd/+VgGn/lYBp/5WA
        af+VgGn/lYBp/5WAaf+VgGn/lYBp/5WAaf+VgGn/lYBp/5WAaf+Wgmr/iXdixAAAABUAAAAEAAAADQAA
        ABUAAAAWAAAAFgAAAB6nk37/sp6B/7Cbfv/az7b/5NzL/+Tbyv/k3Mv/2s+2/7Cbfv+xnID/p5N9/9HG
        sv/QxbD/0MWw/9DFsP/PxK//z8Sv/8/Er//PxK//z8Sv/8/Er//PxK//z8Sv/9TJtP+Yg2v/AAAAFgAA
        AA0AAAArAAAAPwAAAEMAAABDAAAARExDOmuolYD4qZJ3/8/Cqv+8qYj/vKmI/7ypiP/Pwqr/qZJ3/66a
        hP/GuKT/0say/9DEsf/QxLH/0MSw/8/Cr//NwKz/zL+r/8y/q//Mv6v/zL+r/8y/q//NwKz/08i2/5aB
        a/8AAAAWAAAAFYl3YsSXg2z/lYFr/5WBav+UgGr/lIBp/5N/af+Sfmf/mYZx/5F8Zv+RfWb/kXxm/5mG
        cf+Sfmf/kn5o/5F9Zv+RfGX/kHtl/5B7Zf+Qe2T/p5aA/87Crf/Lv6r/y7+q/8u/qf/Lv6r/y7+q/8u/
        qv/Vy7j/l4Jq/wAAABYAAAAWl4Nu/9G6nf/Hr4//xq2O/8Wtjv/FrY7/xK2O/8Ssjf/ErI3/xKyN/8Ss
        jf/ErI3/xKyN/8Ssjf/ErI3/xKyN/8Ssjf/FrY3/xq6O/820lv+RfGb/z8Ou/8q+qf/Kvqj/yr2o/8q+
        qP/Kvqj/zL+q/9jOvf+Yg2v/AAAAFgAAABaYhG3/0r2h/9nRvf/s7Of/6+zp/+rs6f/q6+n/6erp/+nq
        6f/o6un/6Onp/+jq6f/p6un/6erp/+nr6f/q7On/6+zp/+zs5//Z0r3/zbib/5J9Zv/Owq3///3x/8e7
        pf//+/D/yLul///98v/Lv6n/2tDA/5iEbP8AAAAWAAAAFpmEbv/Wwqj/0su4/+GOJP/jkR7/6Zgi/+2d
        Iv/zpCL/96oi//ywI///syP//bEj//irIv/0pSL/7qAi/+qZIv/mkyD/4YkZ/9LMuf/RvaL/kn1l////
        9v/IuaX///nu/8e5o///+e7/ybum/8y/qv/c08T/mYVt/wAAABYAAAAWmYVw/9rIsv/MxLP/45Ux/+ee
        Ov/onS//7KEu//GoL//1rS//+rMw//64MP/7tTD/9q8v//KpL//upC//6Z4v/+WYLP/hjyP/zMW1/9fD
        qv+SfWf/zsGs///67v/HuaT///nt/8i6pf//+/D/zb+r/97Wx/+ahm3/AAAAFgAAABach3D/38+5/8e+
        rP/ilTL/5aBB/+qmRP/spTf/8KYw//OsMf/3sDH/+rIz//exM//0rTL/8agy/+yjMv/onjL/5Jgv/+GP
        Jf/Hv67/2smy/5WAaP////X/yryn///57f/Ju6b///nu/8u9qP/OwKz/4djK/5qFbv8AAAAWAAAAFpyI
        cv/k1cH/wbek/+GRMP/jnj3/6KZF/+6sTf/vrEX/8akz//OqL//0rDD/86ww//GpMf/upTH/66Ex/+ec
        MP/ili7/4I0k/8G3pv/f0Lr/l4Fr/9LFsP///PH/zL6p///77//Mvqn///zw/8/Crf/j3M7/m4Zv/wAA
        ABYAAAAWnYlz/+jcyf+8sZ3/344u/+GZPP/moUL/6qhJ/+2vT//wtFX/8bVT//GvRP/wqzv/7KIs/+ug
        Lf/nmyz/45cr/9+RKf/fiSH/vLCc/+TWwf+Yg23/1ce0/9HCr//Qwq7/0MGu/9DCr//Qwa7/0cKv/+fe
        0v+ch3D/AAAAFgAAABafi3X/7eLQ/7eplf/cjCz/35c6/+OdQP/no0X/6qlL/+ytUf/uslf/77Vd/++4
        Yv/wuWj/77pu/+u2av/rtm7/67l4/+q1c/+2p5L/6dzJ/5uFb//Xyrb/1caz/9TFsf/UxbH/1Maw/9TG
        r//Sxa//6ODV/52Icf8AAAAWAAAAFqCLdf/y6dj/saOO/9qGKf/ckjj/4Jk//+OfQ//mpEj/6KhN/+qs
        Uv/rr1f/67Fd/+uyYv/rtGb/6rRs/+m1cf/os3P/6a9v/7CgiP/u4dD/nYZw/93Muf/jyrr/48q4/9/L
        tP/i0K//4M+u/9jJr//r5dj/nohy/wAAABYAAAAWoYx3//ju3/+snIb/1oIn/9iONf/clD3/4JpB/+Kf
        Rv/ko0v/5qZQ/+epVf/orFr/6K1f/+euY//nr2j/5rBt/+avcf/mrW7/q5iA//Lo1/+fiHP/5sy+/wCK
        Pv8Aiz3/79G2/wAY5/8AF+b/386u/+7m2v+fiXP/AAAAFgAAABajjnf/+/Tn/6eWfv/TfSb/1ocy/9mP
        Of/dlD7/35lF/+KdSP/joU3/5KRT/+WmWP/lqF3/5ali/+SsZv/kq2v/5K1w/+Wsbv+mknj/9+7f/6GK
        c//mzb//AMVS/wDFUf/s0Lb/eWb//3Zl///eza7/8Oje/5+Jc/8AAAAWAAAAFqSOef//+u7/oo1z/9N5
        IP/Ufyn/14Yw/9yNNf/dkTv/4ZdB/+KaRv/jnUz/5KFR/+SjVv/kpVv/5KZh/+SnZv/kqWz/5qlt/6GK
        b//89eb/oYt2/+DOvv/mzcD/5sy//+HOuv/g0bT/39Cz/9nKsv/w6+D/oIp0/wAAABYAAAAVppB6////
        9f+ZgGH/m4Zp/5uHbP+ahmz/moZr/5qFa/+ahWr/mYRq/5mEaf+ZhGn/mYNo/5mDaP+Zg2f/mYNn/5qD
        Zv+agmT/mX9f///47P+jjXf/xKuL/8Sqi//DqYr/wqqK/8KqiP/BqIb/2Mq2//Ls5P+gi3T/AAAAFgAA
        AA2ok33////3////9P////b////2////9v////b////2////9v////b////2////9v////b////2////
        9v////b////2////9f////T///7z/6KNd//BqIf/v6eG/7+mhv+/pob/v6aF/76lg//Yyrb/9O/o/6GM
        df8AAAAWAAAABKWRfbOnknz/z8Kt/83Bq//NwKv/zcCr/83Aq//NwKv/zcCr/83Aq//NwKv/zcCr/83A
        q//NwKr/zMCq/8zAqv/NwKr/zcCr/83BrP+kjnj/xrmr///9/f/9+/r//Pr6//z6+v/8+vr//fr6/9fI
        tf/28Or/oo12/wAAABYAAAAAAAAABKmVgbCtmYP/rJeC/6yXgv+sl4L/rJeC/6yXgv+sl4L/rJeC/6yX
        gv+sl4L/rJeC/6uWgP+ok33/qJN+/6qUgP+qloH/qpaB/72rmP/e0b7/2826/9nMuf/Zy7j/2cu4/9nL
        uP/Zy7j/2Mm2//f07P+jjnf/AAAAFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAWpZB4//z59P/f0b7/w6uK/8Stjf/ErY3/xKuM/8Kqiv/BqIn/waiJ/8Go
        if/BqIn/wKiI/7+mhf/azLn/+fXw/6SPeP8AAAAWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABakj3n//Pjz/9vMuv++pYT/v6eG/7+nhv+/p4b/v6aG/7+m
        hv+/pob/v6aG/7+mhv+/poX/vqSD/9vLuf/79/L/pI95/wAAABYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFqWQef/7+PT/2sq2//v6+P/7+vj/+/r4//v6
        +P/7+vj/+/r4//v6+P/7+vj/+/r4//v6+P/7+vj/2sq2//v49P+lkHn/AAAAFgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVppF7//z69//ayrb/2sm1/9rJ
        tf/aybX/2sm1/9rJtf/aybX/2sm1/9rJtf/aybX/2sm1/9rJtf/ayrb//Pr3/6aRe/8AAAAVAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2plH3////9//36
        9//8+fX//Pn1//z59f/8+fX//Pn1//z59f/8+fX//Pn1//z59f/8+fX//Pn1//369/////3/qZR9/wAA
        AA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABKaS
        frOpk33/zsGr/8zAqf/Mv6n/zL+p/8y/qf/Mv6n/zL+p/8y/qf/Mv6n/zL+p/8y/qf/MwKn/zsGr/6mT
        ff+mkn6zAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAABKmVgbCtmIP/rJeC/6yXgv+sl4L/rJeC/6yXgv+sl4L/rJeC/6yXgv+sl4L/rJeC/6yX
        gv+tmIP/qZWBsAAAAAQAAAAA/gD///gAP//4AD//+AAAAPgAAAD4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAP/4
        AAD/+AAA//gAAP/4AAD/+AAA//gAAP/8AAE=
</value>
  </data>
</root>